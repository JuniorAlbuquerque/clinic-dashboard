"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Query {
  getWeekAppointments(end_date: String!, initial_date: String!, user_id: Float!): [AppointmentModel!]
  getUserInfo(id: Float!): User
}

type AppointmentModel {
  id: ID!
  date: DateTime!
  initial_hour: String!
  end_hour: String!
  patients_packages: PatientPackageModel!
  patient: PatientModel!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type PatientPackageModel {
  name: String!
  package: PackageModel!
}

type PackageModel {
  name: String!
  treatment: TreatmentModel!
}

type TreatmentModel {
  name: String!
}

type PatientModel {
  name: String!
}

type User {
  id: ID!
  email: String!
  name: String!
  role: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

type Mutation {
  login(data: UserLoginData!): Auth!
  signUp(data: UserInputData!): User!
}

type Auth {
  user: User!
  token: String!
}

input UserLoginData {
  email: String!
  password: String!
}

input UserInputData {
  email: String!
  password: String!
  name: String!
}
