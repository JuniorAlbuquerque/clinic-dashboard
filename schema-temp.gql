"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Query {
  getWeekAppointments(end_date: String!, initial_date: String!, user_id: Float!): [AppointmentModel!]
  getAllAppointments(items_per_page: Float, page: Float): AllAppointments!
  getPackagesByTreatment(treatment_id: Float!): [PackageByTreatment!]!
  getPatientCountList: PatientListCount
  searchPatients: [PatientSearch!]!
  getPatientPackageCountList: PatientPackageCountList
  getAllTreatments: [AllTreatments!]
  getAllTreatmentsWithPackages: [AllTreatmentsAndPackages!]
  getUserInfo(id: Float!): User
  getProfessionalCountList: ProfessionalCountList
  getProfessionals: [GetProfessionals!]!
  getProfessionalSchedule(professional_id: Float!): [ProfessionalSchedule!]!
}

type AppointmentModel {
  id: ID!
  start_date: DateTime!
  end_date: DateTime!
  patients_packages: PatientPackageModel!
  patient: PatientModel!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type PatientPackageModel {
  name: String!
  package: PackageModel!
}

type PackageModel {
  name: String!
  treatment: TreatmentAppointmentModel!
}

type TreatmentAppointmentModel {
  name: String!
}

type PatientModel {
  name: String!
}

type AllAppointments {
  allAppointments: [AppointmentsData!]!
  count: Float!
}

type AppointmentsData {
  id: Float!
  start_date: DateTime!
  end_date: DateTime!
  professional: String!
  patient: String!
  treatment: String!
  observations: String
  presence: AppointmentStatus!
}

enum AppointmentStatus {
  PENDING
  PATIENT_MISSED
  CONCLUDED
}

type PackageByTreatment {
  id: ID!
  name: String!
  quantity: Float!
  value: Float!
}

type PatientListCount {
  count: Float!
  lastPatients: [LastPatientList!]!
}

type LastPatientList {
  id: Float!
  name: String!
  birthdate: String!
  appointments: [AppointmentList!]!
  telephone: String!
  patients_packages: [PackageList!]!
}

type AppointmentList {
  start_date: DateTime!
  end_date: DateTime!
}

type PackageList {
  package: PackageItem!
}

type PackageItem {
  name: String!
  treatment: TreatmentItem!
}

type TreatmentItem {
  name: String!
}

type PatientSearch {
  id: Float!
  email: String!
  name: String!
}

type PatientPackageCountList {
  count: Float!
  patientPackageList: [PatientPackage!]!
}

type PatientPackage {
  id: ID!
  patient: UserPackageModel!
  user: UserPackageModel!
  initialDate: DateTime!
  endDate: DateTime!
  payment_status: PaymentStatus!
  package: PackageModelTreatment!
}

type UserPackageModel {
  id: ID!
  name: String!
}

enum PaymentStatus {
  PENDING
  PAID
  BLOCK
}

type PackageModelTreatment {
  treatment: TreatmentModelPackage!
}

type TreatmentModelPackage {
  name: String!
}

type AllTreatments {
  id: ID!
  name: String!
  value: Float!
}

type AllTreatmentsAndPackages {
  id: ID!
  name: String!
  value: Float!
  Package: [PackageAppointment!]!
}

type PackageAppointment {
  id: ID!
  name: String!
  quantity: Float!
  value: Float!
}

type User {
  id: ID!
  email: String!
  name: String!
  role: String!
  password: String!
  clinic_id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
}

type ProfessionalCountList {
  count: Float!
  professionalList: [ProfessionalList!]!
}

type ProfessionalList {
  id: Float!
  name: String!
  email: String!
  role: UserRoles!
}

enum UserRoles {
  ADMIN
  PROFESSIONAL
  VIEWER
}

type GetProfessionals {
  id: Float!
  name: String!
  email: String!
}

type ProfessionalSchedule {
  start_date: DateTime!
  patient: String!
}

type Mutation {
  updateAppointment(data: AppointmentUpdateData!): AppointmentResponse!
  login(data: UserLoginData!): Auth!
  createPatient(data: PatientInputData!): Patient!
  updatePatient(data: PatientUpdateInputData!): PatientReponse!
  createPatientPackage(data: PatientPackageInputData!): PatientPackageCreate!
  createTreatment(packages: [PackageTreatmentList!]!, data: TreatmentInputData!): TreatmentModel!
  updateTreatment(data: TreatmentUpdate!): TreatmentUpdated!
  signUp(data: UserInputData!): User!
}

type AppointmentResponse {
  message: String!
}

input AppointmentUpdateData {
  id: Float!
  start_date: DateTime!
  end_date: DateTime!
  observations: String!
  presence: AppointmentStatus!
}

type Auth {
  user: User!
  token: String!
}

input UserLoginData {
  email: String!
  password: String!
}

type Patient {
  id: ID!
  email: String!
  name: String!
  telephone: String!
  birthdate: String!
  clinic_id: ID!
}

input PatientInputData {
  email: String!
  name: String!
  telephone: String!
  birthdate: String!
  address: String!
  city: String!
  cpf: String!
  weight: Float!
  height: Float!
  clinic_id: Float!
}

type PatientReponse {
  message: String!
}

input PatientUpdateInputData {
  email: String!
  name: String!
  telephone: String!
  birthdate: String!
  address: String!
  city: String!
  cpf: String!
  weight: Float!
  height: Float!
  clinic_id: Float!
  id: Float!
}

type PatientPackageCreate {
  message: String!
}

input PatientPackageInputData {
  appointment: AppointmentInputData!
  schedule: ScheduleInputData!
  payment: PaymentInputData!
}

input AppointmentInputData {
  package_id: Float!
  patient_id: Float!
  professional_id: Float!
  description: String!
  created_by: Float!
}

input ScheduleInputData {
  initial_date: DateTime!
  appointment_days: [AppointmentDays!]!
}

input AppointmentDays {
  start_date: DateTime!
  end_date: DateTime!
}

input PaymentInputData {
  discount: Float!
  payment_type: PaymentType!
  payment_schedule: Boolean!
  payment_date: DateTime!
  payment_status: PaymentStatus!
}

enum PaymentType {
  CREDIT_CARD
  MONEY
}

type TreatmentModel {
  id: ID!
  name: String!
  value: Float!
  active: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PackageTreatmentList {
  quantity: Float!
  value: Float!
}

input TreatmentInputData {
  name: String!
  value: Float!
}

type TreatmentUpdated {
  message: String!
}

input TreatmentUpdate {
  treatment: TreatmentUpdateData!
  packages: [TreatmentUpdatePackageData!]!
}

input TreatmentUpdateData {
  id: Float!
  name: String!
  value: Float!
}

input TreatmentUpdatePackageData {
  id: Float
  value: Float!
  quantity: Float!
}

input UserInputData {
  email: String!
  password: String!
  name: String!
  clinic_id: Float!
  role: UserRoles!
}
